{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4faadb71",
   "metadata": {},
   "source": [
    "# Project SRE: Part 1 - Seismic Input and Random Vibrations\n",
    "\n",
    "* Names: Menno Marissen, Gabriele Mylonopoulos, Bart Slingerland and Jerin Thomas\n",
    "* Student numbers: 5381827, ..., 5309913, ...\n",
    "* Date: 17 May 2025\n",
    "* Course: Applied Dynamics of Structures - Structural Response to Earthquakes\n",
    "* Course code: CIEM5220-U1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f11cf01",
   "metadata": {},
   "source": [
    "## Exercise 1: Governing equations of layered soil system\n",
    "<img align=\"right\" height=700 src=\"./structure.png\"/>\n",
    "\n",
    "The soil system consists of three layers with indices 1, 2 and 3 in downward direction.\n",
    "\n",
    "### Equations of motion\n",
    "The equations of motion for all three layers with $m\\in(1,2,3)$ are:\n",
    "\n",
    "$$\\rho_m \\frac{\\partial^2 u_m(z_m,t)}{\\partial t^2} - G_m \\frac{\\partial^2 u_m(z_m,t)}{\\partial z^2} - \\eta_m \\frac{\\partial^3 u_m(z_m,t)}{\\partial z^2 \\partial t} = 0$$\n",
    "\n",
    "in which $\\rho_m$ is the density of the layer [kg/m³], $u_m(z_m,t)$ is the horizontal displacement [m] in local coordinate system $0<z_m<H_m$ [m], $t$ is the time [s], $G_m$ is the shear modulus of the layer [N/m²], and $\\eta_m$ is the damping coefficient [Ns/m²]. The presence of the offshore wind turbine is ignored.\n",
    "\n",
    "The shear stress is given by $\\tau_m(z_m,t) = G_m\\gamma_m + \\eta_m \\frac{\\partial \\gamma_m}{\\partial t}$ with $\\gamma_m = \\frac{\\partial u_m}{\\partial z}$.\n",
    "\n",
    "### Boundary conditions\n",
    "The equations of motion are second-order in space, which means that there should be one boundary condition at the soil surface and one at the base of the multi-layered soil medium.\n",
    "\n",
    "At the soil surface ($z_1=0$), the shear stress is zero:\n",
    "$$\\tau_1(z_1=0,t) = G_1\\frac{\\partial u_1}{\\partial z} + \\eta_1 \\frac{\\partial^2 u_1}{\\partial z \\partial t} = 0$$\n",
    "\n",
    "At the base, the ground displacement should match the motion of the base:\n",
    "$$u_3(z_3=H_3,t) = u_0(t)$$\n",
    "\n",
    "### Interface conditions\n",
    "Following from the fact that the equations of motion are second-order in space, there should be two interface conditions at each interface. One relates the displacements to each other, while the second one takes care of shear stress equilibrium. Both conditions hold for $m\\in(1,2)$.\n",
    "\n",
    "$$u_m(z_m=H_m,t) = u_{m+1}(z_{m+1}=0,t)$$\n",
    "$$\\tau_m(z_m=H_m,t) = \\tau_{m+1}(z_{m+1}=0,t)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4453840",
   "metadata": {},
   "source": [
    "## Exercise 2: Natural frequencies and modes of vibration\n",
    "### Converting to the frequency domain\n",
    "Material damping may be neglected, so $\\eta_m=0$; $m\\in(1,2,3)$. The equations of motion become (using the previously mentioned values for the index $m$):\n",
    "\n",
    "$$\\rho_m \\frac{\\partial^2 u_m(z_m,t)}{\\partial t^2} - G_m \\frac{\\partial^2 u_m(z_m,t)}{\\partial z^2} = 0$$\n",
    "\n",
    "with $\\tau_m(z_m,t) = G_m \\frac{\\partial u_m}{\\partial z}$. A general solution is expected to be in the form of:\n",
    "\n",
    "$$u_m(z_m,t) = \\tilde{U}_m(z_m,\\omega) e^{i\\omega t}$$\n",
    "\n",
    "Substitution of this into the equation of motion converts the problem to the frequency domain and yields:\n",
    "\n",
    "$$\\left(\\omega^2 \\rho_m \\tilde{U}_m(z_m,\\omega) + G_m \\frac{d^2\\tilde{U}_m(z_m,\\omega)}{dz^2}\\right) e^{i\\omega t} = 0$$\n",
    "$$\\frac{d^2\\tilde{U}_m(z_m,\\omega)}{dz^2} + \\frac{\\omega^2 \\rho_m}{G_m} \\tilde{U}_m(z_m,\\omega) = 0$$\n",
    "$$\\frac{d^2\\tilde{U}_m(z_m,\\omega)}{dz^2} + k_m^2 \\tilde{U}_m(z_m,\\omega) = 0$$\n",
    "\n",
    "with $k_m^2 = \\frac{\\omega^2 \\rho_m}{G_m} = \\frac{\\omega^2}{c_m^2}$ with $c_m = \\sqrt{\\frac{G_m}{\\rho_m}}$ and thus $k_m = \\pm \\frac{\\omega}{c_m}$.\n",
    "\n",
    "A general solution of this new equation is expected to be in the form of:\n",
    "\n",
    "$$\\tilde{U}_m(z_m,\\omega) = \\tilde{A}_{m,1} e^{ik_m z_m} + \\tilde{A}_{m,2} e^{-ik_m z_m}$$\n",
    "\n",
    "with $k_m = \\frac{\\omega}{c_m}$, so the negative square root is written as $-k_m$. Only $\\tilde{A}_{m,1}$ and $\\tilde{A}_{m,2}$ remain unknown for this second-order problem, which can thus be solved for using the two boundary and/or interface conditions per layer.\n",
    "\n",
    "### Applying boundary conditions\n",
    "The upper boundary condition:\n",
    "$$\\tau_1(z_1=0,t) = G_1\\frac{\\partial u_1}{\\partial z} = 0$$\n",
    "$$G_1 ik_1(\\tilde{A}_{1,1} e^{ik_1 0} - \\tilde{A}_{1,2} e^{-ik_1 0}) = 0$$\n",
    "$$G_1 ik_1(\\tilde{A}_{1,1} - \\tilde{A}_{1,2}) = 0$$\n",
    "$$\\tilde{A}_{1,1} = \\tilde{A}_{1,2}$$\n",
    "\n",
    "The lower boundary condition:\n",
    "$$u_3(z_3=H_3,t) = u_0(t)$$\n",
    "$$\\left(\\tilde{A}_{3,1} e^{ik_3 H_3} + \\tilde{A}_{3,2} e^{-ik_3 H_3}\\right) e^{i\\omega t} = u_0(t)$$\n",
    "\n",
    "### Applying interface conditions\n",
    "Equilibrium of displacements:\n",
    "$$u_m(z_m=H_m,t) = u_{m+1}(z_{m+1}=0,t)$$\n",
    "$$\\tilde{U}_m(H_m,\\omega) e^{i\\omega t} = \\tilde{U}_{m+1}(0,\\omega) e^{i\\omega t}$$\n",
    "$$\\tilde{U}_m(H_m,\\omega) = \\tilde{U}_{m+1}(0,\\omega)$$\n",
    "$$\\tilde{A}_{m,1} e^{ik_m H_m} + \\tilde{A}_{m,2} e^{-ik_m H_m} = \\tilde{A}_{m+1,1} e^{ik_{m+1} 0} + \\tilde{A}_{m+1,2} e^{-ik_{m+1} 0}$$\n",
    "$$\\tilde{A}_{m,1} e^{ik_m H_m} + \\tilde{A}_{m,2} e^{-ik_m H_m} = \\tilde{A}_{m+1,1} + \\tilde{A}_{m+1,2}$$\n",
    "\n",
    "Equilibrium of shear stresses:\n",
    "$$\\tau_m(z_m=H_m,t) = \\tau_{m+1}(z_{m+1}=0,t)$$\n",
    "$$G_m \\frac{\\partial u_m}{\\partial z}\\Big|_{z_m=H_m} = G_{m+1} \\frac{\\partial u_{m+1}}{\\partial z}\\Big|_{z_{m+1}=0}$$\n",
    "$$G_m \\frac{d\\tilde{U}_m(z_m,\\omega)}{dz}e^{i\\omega t}\\Big|_{z_m=H_m} = G_{m+1} \\frac{d\\tilde{U}_{m+1}(z_{m+1},\\omega)}{dz}e^{i\\omega t}\\Big|_{z_{m+1}=0}$$\n",
    "$$G_m ik_m\\left(\\tilde{A}_{m,1} e^{ik_m H_m} - \\tilde{A}_{m,2} e^{-ik_m H_m}\\right) = G_{m+1} ik_{m+1}\\left(\\tilde{A}_{m+1,1} e^{ik_{m+1} 0} - \\tilde{A}_{m+1,2} e^{-ik_{m+1} 0}\\right)$$\n",
    "$$G_m ik_m\\left(\\tilde{A}_{m,1} e^{ik_m H_m} - \\tilde{A}_{m,2} e^{-ik_m H_m}\\right) = G_{m+1} ik_{m+1}\\left(\\tilde{A}_{m+1,1} - \\tilde{A}_{m+1,2}\\right)$$\n",
    "$$\\tilde{A}_{m+1,1} - \\tilde{A}_{m+1,2} = a_m\\left(\\tilde{A}_{m,1} e^{ik_m H_m} - \\tilde{A}_{m,2} e^{-ik_m H_m}\\right)$$\n",
    "\n",
    "with $a_m = \\frac{G_m k_m}{G_{m+1} k_{m+1}}$.\n",
    "\n",
    "### Combining everything to obtain the solution\n",
    "Solving the two final equations from the interface conditions for the unknown deeper-layer coefficients $\\tilde{A}_{m+1,1}$ and $\\tilde{A}_{m+1,2}$ yields:\n",
    "\n",
    "$$\\tilde{A}_{m+1,1} = \\frac{1}{2}\\tilde{A}_{m,1}(1+a_m)e^{ik_m H_m} + \\frac{1}{2}\\tilde{A}_{m,2}(1-a_m)e^{-ik_m H_m}$$\n",
    "$$\\tilde{A}_{m+1,2} = \\frac{1}{2}\\tilde{A}_{m,1}(1-a_m)e^{ik_m H_m} + \\frac{1}{2}\\tilde{A}_{m,2}(1+a_m)e^{-ik_m H_m}$$\n",
    "\n",
    "which can be combined with the two previously found boundary conditions:\n",
    "$$\\tilde{A}_{1,1} = \\tilde{A}_{1,2}$$\n",
    "$$\\left(\\tilde{A}_{3,1} e^{ik_3 H_3} + \\tilde{A}_{3,2} e^{-ik_3 H_3}\\right) e^{i\\omega t} = u_0(t)$$\n",
    "\n",
    "and solved for, to finally be substituted to obtain the final solution:\n",
    "$$u_m(z_m,t) = \\tilde{U}_m(z_m,\\omega) e^{i\\omega t} = \\left(\\tilde{A}_{m,1} e^{ik_m z_m} + \\tilde{A}_{m,2} e^{-ik_m z_m}\\right)e^{i\\omega t}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f387c12",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing packages\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pydynsm as PDM\n",
    "import scipy.optimize as opt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "47dff0b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Defining parameters\n",
    "\n",
    "student_number = 5381827\n",
    "student_number = list(str(student_number))\n",
    "for i in range(len(student_number)):\n",
    "    student_number[i] = int(student_number[i])\n",
    "A, B, C, D, E, F, G = student_number\n",
    "\n",
    "M = (800 + F * 10) * 1E3 #kg\n",
    "J = 300E6 #kgm²\n",
    "rho_t = 7850 #kg/m³\n",
    "E_t = 210E9 #N/m²\n",
    "D_out = 9.1 #m\n",
    "D_inner = 8.96 #m\n",
    "H_t = 140 + A #m\n",
    "H_w = 30 + F #m\n",
    "H_1 = 2 + B #m\n",
    "H_2 = 58 + G #m\n",
    "H_3 = 38 + F #m\n",
    "G_1 = (100 + F * 10) * 1E6 #N/m²\n",
    "rho_1 = 1600 #kg/m³\n",
    "eta_1 = 1000 + C * 10 #Ns/m²\n",
    "G_2 = (100 + D * 10) * 1E6 #N/m²\n",
    "rho_2 = 1900 #kg/m³\n",
    "eta_2 = 1000 + E * 10 #Ns/m²\n",
    "G_3 = (100 + E * 10) * 1E6 #N/m²\n",
    "rho_3 = 2000 #kg/m³\n",
    "eta_3 = 1000 + D * 10 #Ns/m²\n",
    "\n",
    "f_max = 200 #Hz\n",
    "omega = np.linspace(1, f_max * 2 * np.pi, 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "87c4f7dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Assembler 'Soil' successfully initialised\n",
      "Successfully added element of type: Shear Beam to Element 0\n",
      "Successfully added element of type: Shear Beam to Element 1\n",
      "Successfully added element of type: Shear Beam to Element 2\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Instantiating class\n",
    "Assembler = PDM.Assembler\n",
    "s1 = Assembler('Soil')\n",
    "\n",
    "#Creating nodes\n",
    "nodes = []\n",
    "H_list = [0, -H_1, -(H_1 + H_2), -(H_1 + H_2 + H_3)]\n",
    "\n",
    "for H in H_list:\n",
    "    node = s1.CreateNode(0, H, dof_config=['x', 'z'])\n",
    "    nodes.append(node)\n",
    "\n",
    "nodes[0].fix_node('x')\n",
    "nodes[1].fix_node('x')\n",
    "nodes[2].fix_node('x')\n",
    "nodes[-1].fix_node('x')\n",
    "#tried a lot: different A_s values, dof_config, fixing all nodes in x, fixing z and/or phi of lower node as well ...\n",
    "\n",
    "#Creating elements\n",
    "elems = []\n",
    "\n",
    "rho = [rho_1, rho_2, rho_3]\n",
    "A_s = 4 #?????????\n",
    "G_list = [G_1, G_2, G_3]\n",
    "\n",
    "for i in range(len(nodes) - 1):\n",
    "    elem = s1.CreateElement([nodes[i], nodes[i + 1]])\n",
    "    section = {'rho': rho[i], 'A': A_s, 'G': G_list[i]}\n",
    "    elem.SetSection('Shear Beam', section)\n",
    "\n",
    "s1.PlotStructure(plot_elements=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "680e0c86",
   "metadata": {},
   "outputs": [],
   "source": [
    "def BVP(ww):\n",
    "    return s1.GlobalConstrainedStiffness(ww)\n",
    "\n",
    "def det_func(ww):\n",
    "  return np.linalg.det(BVP(ww) / 1e10)\n",
    "\n",
    "def find_eigen_frequencies(omega):\n",
    "    Det_M = np.array([det_func(ww) for ww in omega])\n",
    "    omega_initial = omega[np.where(np.isclose(abs(np.diff(np.angle(Det_M)))/np.pi,1, atol=.1))[0]]\n",
    "    omega_m = []\n",
    "    for ww in omega_initial:\n",
    "        omega_m.append(opt.newton(det_func,ww,maxiter=200).real)\n",
    "    return np.unique(omega_m)\n",
    "\n",
    "def remove_close_roots(roots, tol=1e-6):\n",
    "    roots = np.sort(roots)\n",
    "    filtered_roots = [roots[0]]\n",
    "\n",
    "    for i in range(1, len(roots)):\n",
    "        if not np.isclose(roots[i], filtered_roots[-1], atol=tol):\n",
    "            filtered_roots.append(roots[i])\n",
    "\n",
    "    return np.array(filtered_roots)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4cf74718",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 0 is out of bounds for axis 0 with size 0",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 5\u001b[0m\n\u001b[0;32m      3\u001b[0m omega_range \u001b[38;5;241m=\u001b[39m omega\n\u001b[0;32m      4\u001b[0m omega_m \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(find_eigen_frequencies(omega_range))\n\u001b[1;32m----> 5\u001b[0m omega_m \u001b[38;5;241m=\u001b[39m \u001b[43mremove_close_roots\u001b[49m\u001b[43m(\u001b[49m\u001b[43momega_m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      6\u001b[0m f_m \u001b[38;5;241m=\u001b[39m omega_m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi)\n\u001b[0;32m      8\u001b[0m Det_M \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([det_func(omega) \u001b[38;5;28;01mfor\u001b[39;00m omega \u001b[38;5;129;01min\u001b[39;00m omega_range])\n",
      "Cell \u001b[1;32mIn[4], line 17\u001b[0m, in \u001b[0;36mremove_close_roots\u001b[1;34m(roots, tol)\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mremove_close_roots\u001b[39m(roots, tol\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1e-6\u001b[39m):\n\u001b[0;32m     16\u001b[0m     roots \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39msort(roots)\n\u001b[1;32m---> 17\u001b[0m     filtered_roots \u001b[38;5;241m=\u001b[39m [\u001b[43mroots\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m]\n\u001b[0;32m     19\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;28mlen\u001b[39m(roots)):\n\u001b[0;32m     20\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np\u001b[38;5;241m.\u001b[39misclose(roots[i], filtered_roots[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m], atol\u001b[38;5;241m=\u001b[39mtol):\n",
      "\u001b[1;31mIndexError\u001b[0m: index 0 is out of bounds for axis 0 with size 0"
     ]
    }
   ],
   "source": [
    "s1.run_connectivity()\n",
    "\n",
    "omega_range = omega\n",
    "omega_m = np.array(find_eigen_frequencies(omega_range))\n",
    "omega_m = remove_close_roots(omega_m)\n",
    "f_m = omega_m / (2 * np.pi)\n",
    "\n",
    "Det_M = np.array([det_func(omega) for omega in omega_range])\n",
    "arg_dets = np.angle(Det_M)\n",
    "\n",
    "fig, axs = plt.subplots(3, sharex=True, figsize=(10,6))\n",
    "axs[0].plot(omega / 2 / np.pi, abs(Det_M), label='abs')\n",
    "axs[0].set_yscale('log')\n",
    "axs[1].plot(omega / 2 / np.pi, Det_M.real/omega**6, label='Real')\n",
    "axs[1].plot(omega / 2 / np.pi, Det_M.imag/omega**6, label='Imag')\n",
    "axs[2].plot(omega / 2 / np.pi, arg_dets, label='argument')\n",
    "axs[2].plot(omega[:-1] / 2 / np.pi, abs(np.diff(arg_dets))/np.pi, label='abs phase jump / $\\\\pi$')\n",
    "axs[2].set_ylim([-np.pi, np.pi])\n",
    "\n",
    "axs[0].scatter(f_m, np.ones_like(omega_m), marker='x', c='r', label='Eigenfrequencies')\n",
    "axs[1].scatter(f_m, np.zeros_like(omega_m), marker='x', c='r', label='Eigenfrequencies')\n",
    "axs[2].scatter(f_m, np.zeros_like(omega_m), marker='x', c='r', label='Eigenfrequencies')\n",
    "for ax in axs.flat:\n",
    "    ax.grid()\n",
    "    ax.legend()\n",
    "    ax.set_xlim([0, f_max])\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae232086",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
